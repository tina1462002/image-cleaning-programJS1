import cv2
import numpy as np
import os
import math

input_folder = "output_images"
output_folder = "output_images1"
os.makedirs(output_folder, exist_ok=True)

def process_image(image_path, output_path):
    img = cv2.imread(image_path)
    if img is None:
        print(f"Could not read {image_path}")
        return
    
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY_INV)

    # contours
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if not contours:
        cv2.imwrite(output_path, img)
        return
    
    largest_contour = max(contours, key=cv2.contourArea)

    # Deskew angle from minAreaRect
    rectangle = cv2.minAreaRect(largest_contour)
    angle = rectangle[-1]

    #normalize angle so portrait stays portrait
    if angle < -45:
        angle += 90

    # Apply correction only if it's a mild skew
    if abs(angle) > 0.5:  # remove tiny noise (<0.5Â°)
        (h, w) = img.shape[:2]
        center = (w // 2, h // 2)

        # Rotation with expanded canvas (to avoid cropping)
        M = cv2.getRotationMatrix2D(center, angle, 1.0)
        cos, sin = abs(M[0, 0]), abs(M[0, 1])
        new_w = int(h * sin + w * cos)
        new_h = int(h * cos + w * sin)

        # Shift to keep whole image visible
        M[0, 2] += (new_w - w) / 2
        M[1, 2] += (new_h - h) / 2

        deskewed = cv2.warpAffine(img, M, (new_w, new_h),
                                  flags=cv2.INTER_CUBIC,
                                  borderMode=cv2.BORDER_CONSTANT,
                                  borderValue=(255, 255, 255))
    else:
        deskewed = img

    # --- Force portrait orientation 
    h, w = deskewed.shape[:2]
    if w > h:  # if accidentally landscape, rotate back
        deskewed = cv2.rotate(deskewed, cv2.ROTATE_90_CLOCKWISE)

    cv2.imwrite(output_path, deskewed)
  # --- Force portrait orientation
    h, w = deskewed.shape[:2]

    if h > w:  # if taller than wide, rotate right
        deskewed = cv2.rotate(deskewed, cv2.ROTATE_90_CLOCKWISE)

    cv2.imwrite(output_path, deskewed)

#Run for all images
for filename in os.listdir(input_folder):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.tif', '.bmp')):
        process_image(os.path.join(input_folder, filename),
                      os.path.join(output_folder, filename))
        print(f"Processed {filename}")
